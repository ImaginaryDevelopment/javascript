<html>
    
    <body>
    	<a href="https://github.com/pivotal/jasmine/wiki/Matchers">Jasmine Matches</a>
        <script src="sugar.min.js"></script>
<script src="dungeonGenerator.js"></script>
<script src="https://github.com/searls/jasmine-all/raw/master/jasmine-all-min.js"></script>
    	<script>
    	var x=80;
var y=25;

describe('Tile',function(){
    it('has a isDirtfloorOrCorridor method',function(){
        expect(new Tile().isDirtfloorOrCorridor).toBeDefined();
    });
    
});
describe('getTile(n)',function(){
    it('can find unused',function(){
        var actual=getTile('unused');
        expect(actual).toBeDefined();
        expect(actual.name).toBe("unused");
        
    });
});
describe('All tiles', function () {  
    it('have a name', function () {  
        for(var i=0;i<Tiles.length;i++)
            expect(Tiles[i].name).toBeDefined();
    });  
});  
describe('Array::cross',function(){
    it('should return all points',function(){
        var result=[0,1].cross([3,4])
        expect(result.length).toBe(4);
    });

});
describe('Dungeon',function(){
    describe('getFeatureLowerBound',function(){
        it('should return whole numbers',function(){
            var actual = new Dungeon().getFeatureLowerBound(3,1);
            expect(actual).toBe(3);
        });
    });
    describe('getRoomPoints',function(){
        it('works north',function(){
            var points=new Dungeon().getRoomPoints(0,0,4,4,Direction.North);
            expect(points.length).toBe(16);
            expect(points[0]).toBeDefined();
            expect(points[0].y).toBe( 0);
            expect(points[0].x).toBe(-2);
            expect(points[1].y).toBe(-1);
            expect(points[1].x).toBe(-2);
        });
    });
    describe('initialize',function(){
        var actual=new Dungeon();
        actual.initialize(x,y);
        it('is size x,y',function(){
            expect(actual.getDungeon().length).toBe(x*y);
        });
        it('has stone south and north walls',function(){
            for(var i=0;i<x;i++)
            {
                expect(actual.getCellType(i,0).name).toBe('stoneWall');
                expect(actual.getCellType(i,y-1).name).toBe('stoneWall');
            }
        });
        it('has stone west and east walls',function(){
            for(var i=0;i<y;i++){
                expect(actual.getCellType(0,i).name).toBe('stoneWall');
                expect(actual.getCellType(x-1,i).name).toBe('stoneWall');
            }
        });
    });
    it('setsCells',function(){
        var actual=new Dungeon();
        expect(actual).toBeDefined();
        actual.initialize(x,y);
        
        expect(actual.getCellType(1,1).name).toBe("unused");
        actual.setCell(1,1,getTile("dirtFloor"));
        expect(actual.getCellType(1,1).name).toBe("dirtFloor");
    });
    it('can create the initial room',function(){
        var d=new Dungeon();
        d.initialize(x,y);
        xcenter= Math.round (x/2);
        ycenter= Math.round (y/2);
        var actual=d.makeRoom(xcenter,ycenter,8,6,Math.randInt(0,3));
        expect(actual).toBe(true);
        
    });
   
});

    	</script>
    </body>
 </html>