<html>
    <head>
    	<link rel="stylesheet" type="text/css" href="dungeonGenerator.css">
    </head>
    <body>
        <a href="https://github.com/ImaginaryDevelopment/javascript/raw/master/coffee/dungeonGenerator.js">Dungeon Generator.js</a>
        which is based on
        <a href="http://roguebasin.roguelikedevelopment.org/index.php?title=Java_Example_of_Dungeon-Building_Algorithm"> Bsp Dungeon Building</a>

        <div data-role="inputs">
            x size:
            <input type="text" data-bind="value: x" />
            y size:
            <input type="text" data-bind="value: y" />
            features desired:
            <input type="text" data-bind="value: objectsdesired" />

            <input type="button" data-bind="click: generate" value="generate" />
            
        </div>
         <div data-role="summary">
        	x:<div data-bind="text: lastInputs().x"></div>
			y:<div data-bind="text: lastInputs().y"></div>
			features desired:<div data-bind="text: lastInputs().objectsdesired"></div>
			features: <div data-bind="text: features.length"></div>
        </div>
        <table>
            <tbody data-bind="foreach: rows">
                <tr data-bind="foreach: $data,attr:{'data-y':$index}">
                    <td data-bind="html:src, attr:{'data-x':$index,'data-type':name},style:{color:color}">
                        test
                    </td>
                </tr>
            </tbody>
        </table>

        <script src="http://cdnjs.cloudflare.com/ajax/libs/knockout/2.2.1/knockout-min.js">
        </script>
        <script src="dungeonGenerator.js">
        </script>
        <script>
        var dungeonModel = function(x, y, objects) {
        var self = this;
        var d = new Dungeon();
        d.createDungeon(x, y, objects);
        self.x = ko.observable(x);
        self.y = ko.observable(y);
        self.features=ko.observableArray();
        self.objectsdesired=ko.observable(objects)
        self.lastInputs=ko.observable();

        self.rows = ko.observableArray();
        self.generate = function() {
        	if(self.features() && self.features().length>0)
				self.features.removeAll();
        	d.createDungeon(self.x(),self.y(),self.objectsdesired());
        	for(var j=0; j<self.rows().length;j++)
        		self.rows()[j].removeAll();
            self.rows.removeAll();
            for (var j = 0; j < self.y(); j++) {
                self.rows.push(ko.observableArray([]));
                for (var i = 0; i < self.x(); i++) {
                    self.rows()[j].push(d.getCellType(i, j));
                }
            }
            self.lastInputs({x:self.x(),y:self.y(),objectsdesired:self.objectsdesired()});
            
            self.features(d.features);
            console.log(d.showDungeon());
        };
        self.generate();


    }
ko.applyBindings(new dungeonModel(40, 25, 30));
        </script>
    </body>

</html>
