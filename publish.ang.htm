<!doctype html>
<html>
  <head>
    <title>Configuration Helper</title>
    <style>
      body.lightsoff{
        background-color: black;
        color:white;
      }
      .clickable{
        color: #00E;
        cursor:pointer;
      }
      .clickable:hover{
        text-decoration: underline;
      }
      .case{
        color: #00FF00;
      }
      .sandbox{
        color: #FF00FF;
      }
      .lightson .value,.value{
        color: #0000FF;
      }
      .lightsoff .value{
        color: #FFFF00;
      }
      .error {
        color: #8B0000;
      }
      .lightsoff .success{
        color: #00FFFF;
      }
      .lightson .success{
        color: #00008B;
      }
      .invalid{
        color: #C0C0C0;
        cursor: text;
        /* text-decoration: line-through;*/
      }
    </style>
  </head>
  <body ng-app="myApp" ng-controller="PublishCtrl" ng-class="{true:'lightson',false:'lightsoff'}[lights]">
    <ul ng-init="tab=1; tabs=['Settings','Getting Setup to code', 'Publishing','Sandbox Config','Svc Diagnostics','Deploy Diagnostics'];" data-role="tab menu">
      <li ng-repeat="ts in tabs"><span ng-click="$parent.tab=($index+1)" ng-class="{true:'clickable',false:''}[$parent.tab!=$index+1]">{{ts}}</span></li>
    </ul>
      <div data-role="settings" ng-show="tab ==1">
        <div>
          <label>Machine</label>
          <input ng-model="globals.sandbox" placeholder="MachineName"/>
        </div>
        <label>CodeBase</label>
        <input ng-model="codebase" placeholder="Test Release 13.1.0102.00"/>
        <label>customer</label>
        <input ng-model="customer" placeholder="Homestreet"/>
        <label>case</label> <input type="checkbox" title="standard?" ng-model="isStandard" />
        <input ng-model="case" placeholder="76700" />
        <div>
          <label>relativePathToWebSiteBase</label>
          <input ng-model="machineBasePath" placeholder="c$\MFWebContent\Cases\" /> <span class="clickable" ng-click="machineBasePath='c$\\MFWebContent\\Cases\\';">Use MFWebContent</span> <span class="clickable" ng-click="machineBasePath='C$\\Microsoft .Net 3.5 Framework\\Mortgageflex products\\Common Framework\\Host\\';">Use local</span>
        </div>
          <label>dev</label>
          <input ng-model="dev" placeholder="bdimperio" />
          <label>Lights on?</label>
          <input ng-checked="lights" ng-model="lights" type="checkbox" />
      </div>
      <div data-role="setup" ng-show="tab ==2">
        <div> <h2>IIS setup</h2>
            <ul><li><span class="value">Site Bindings</span> should have a binding for <span class="value">net.tcp</span> bound to <span class="value">808:*</span></li></ul>
        </div>
        <div> <h2>estimation</h2>
            <ol>
              <li>Determine files you suspect to change and add them to the case comments.</li>
              <li>check if standard, {{customer}} standard, and/or {{customer}} have changes you will have to merge.</li>
              <li>add estimate and reassign to QAB for estimation
            </ol>
        </div>
        <div> <h2>Source Retrieval</h2>
          <ol><li>Pull code from <span class="value"><a href="file://\\mortgageflex.com\root\sourcecode\dotNETsource\">\\mortgageflex.com\root\sourcecode\dotNETsource\</a></span> ({{codebase}})</li>
            <li>If case type is <span class="value">problem in standard</span> check all 3 locations for any existing check outs, check out the files you plan to modify for the case<ol>
              <li>Do coding against standard FIRST</li>
            <li>After unit testing approved for standard, retro-fit the code into the customer's code base.</li>  
            </ol></li>
            <li ng-class="{true:'',false:'invalid'}[!!customer]">Pull in {{customer}}'s changes and file additions from "<span class="value">Standard Code Base</span>" from VSS</li>
            <li ng-class="{true:'',false:'invalid'}[!!customer]">Pull in {{customer}}'s current branch on top of that from VSS</li>
            <li>have code in custom unit tested
          </ol>
        </div>
      </div>
      <div data-role="publishing" ng-show="tab == 3">
        <div> <h2>visual studio publish dialogs</h2> On first deploy (it should be saved after that)
         <ul>
          <li ng-class="{true:'value',false:'invalid'}[(globals.sandbox && validcase())==true]">\\<span class="sandbox">{{displaySandbox()}}</span>\{{machineBasePath}}<span class="case">{{displayCase()}}</span>\LoanQuestNETDeploy\</li>
          <li> Set it to <span class="value">From a Web site</span></li>
          <li ng-class="{true:'value',false:'invalid'}[(globals.sandbox && validcase())==true]">http://<span class="sandbox">{{displaySandbox()}}</span>.mortgageflex.com/<span class="case">{{displayCase()}}</span>/LoanQuestNETDeploy/</li>
        </ul> </div>
        <div><h2> file system - deploy service(s)</h2>
          Copy <span class="value">C:\Microsoft .Net 3.5 Framework\Mortgageflex products\Common Framework\Host\Mortgageflex.Services.Host.LoanQuest</span>
          to <span ng-class="{true:'value',false:'invalid'}[(globals.sandbox && validcase())==true]">\\<span class="sandbox">{{displaySandbox()}}</span>\{{machineBasePath}}<span class="case">{{displayCase()}}</span>\Mortgageflex.Services.Host.LoanQuest</span>
        </div>
        <div> <h2>Rdp Session</h2>
          On each deploy
          <ol>
            <li ng-class="{true:'',false:'invalid'}[!!globals.sandbox]">rdp to <span class="sandbox">{{displaySandbox()}}</span></li>
            <li>run <span class="value">C:\Program Files (x86)\MortgageFlex Systems\MortgageFlex LoanQuest Configuration\bin\MortgageFlex.LoanQuest.Configuration.exe</span></li>
            <li>Usually <span class="value">Origination</span></li>
            <li>Select <span class="value">Deployment Server Configurations</span> (ensure only <span class="value">3-tier</span> is checked)</li>
            <li>Click <span class="value">Browse</span> -> <span ng-class="{true:'value',false:'invalid'}[(globals.sandbox && validcase())==true]">C:\MFWebContent\Cases\<span class="case">{{displayCase()}}</span>\LoanQuestNETDeploy</span></li>
            <li> Verify update location: <a href="{{caseUrl()}}/LoanQuestNETDeploy/Mortgageflex.LoanQuest.application"><span ng-class="{true:'value',false:'invalid'}[(globals.sandbox && validcase())==true]">http://<span class="sandbox">{{displaySandbox()}}</span>.mortgageflex.com/<span class="case">{{displayCase()}}</span>/LoanQuestNETDeploy/Mortgageflex.LoanQuest.application</span></a></li>
            <li >Unique Environment Name <span ng-class="{true:'value',false:'invalid'}[(environmentName() && validcase())==true]">{{environmentName()}}<span class="case">{{displayCase()}}</span></span></li>
            <li>From <span ng-class="{true:'value',false:'invalid'}[validcase()==true]">LoanQuestMonitor<span class="case">{{displayCase()}}</span>@mortgageflex.com</span></li>
            <li>to <span ng-class="{true:'value',false:'invalid'}[!!dev]">{{dev}}@mortgageflex.com</span></li>
            <li>Application Server Url: <a href="http://{{displaySandbox()}}.mortgageflex.com/{{displayCase()}}/Mortgageflex.Services.Host.LoanQuest/WcfPortal.svc"><span ng-class="{true:'value',false:'invalid'}[(globals.sandbox && validcase())==true]">http://<span class="sandbox">{{displaySandbox()}}</span>.mortgageflex.com/<span class="case">{{displayCase()}}</span>/Mortgageflex.Services.Host.LoanQuest/WcfPortal.svc</span></a></li>
          </ol>

        </div>
        <div><h2>IIS manager</h2>
          only on the first deploy
          <ol>
            <li>add a new virtual directory for the <span ng-class="{true:'case',false:'invalid'}[validcase()]">{{displayCase()}}</span> directory pointing to <span ng-class="{true:'value',false:'invalid'}[validcase()]">C:\MFWebContent\Cases\<span class="case">{{displayCase()}}</span></span></li>
            <li>convert to applications <span class="value">LoanQuestNETDeploy</span> and <span class="value">Mortgageflex.Services.Host.LoanQuest</span>
          </ol>
          
            Update all services -> Advanced Settings -> Enabled Protocols <span class="value">http,net.tcp</span>
        </div>
        <div><h2>Test install</h2>
          <div>Open the app from <a href="{{caseUrl()}}{{deployUrl()}}"><span ng-class="{true:'value',false:'invalid'}[(globals.sandbox && validcase())==true]">http://<span class="sandbox">{{displaySandbox()}}</span>.mortgageflex.com/<span class="case">{{displayCase()}}</span>{{deployUrl()}}</span></a> and make sure you can login</div>
          Test the case feature(s)
        </div>

        <div><h2>Source Changes</h2>
          <ul>
            <li>comment all changes with <span ng-class="{true:'case',false:'invalid'}[validcase()]"> // {{{true:'',false:'custom '}[!!isStandard]}}case {{displayCase()}}</span></li>
          </ul>
        </div>
        <div><h2>Case management</h2>
          <ol>
            <li>Update the case to ~<span class="value">80</span>%</li>
            <li>Add a comment about the deployment location <a href="{{caseUrl()}}{{deployUrl()}}"><span ng-class="{true:'value',false:'invalid'}[(globals.sandbox && validcase())==true]">http://<span class="sandbox">{{displaySandbox()}}</span>.mortgageflex.com/<span class="case">{{displayCase()}}</span>{{deployUrl()}}</span></a></li>
            <li>Reassign to QA (usually <span class="value">QAB</span>)</li>
            <li>Set the Reassign for to <span class="value">Unit Testing</span></li>
          </ol>
        </div>
      </div>
      <div data-role="sandbox config" ng-show="tab ==4">
        <h2>IIS</h2>
        <ul>  
          <li> App pool must run as NetworkService</li>
          <li>32 bit applications enabled</li>
        </ul>
      </div>
      <div data-role="svc diagnostics" ng-show="tab ==5">
        <div><h2>Service Tests</h2>
          <table>
            <thead>
              <tr>
                <th>Name</th><th>status</th><th>link</th>
              </tr>
            </thead>
            <tbody>
            <tr ng-repeat="svc in services">
              <td>{{svc.name}}<span ng-show="!!svc.notes" title="{{svc.notes}}">*</span></td>
              <td><span ng-bind-html-unsafe="getUrlStatus(svc.url)"></span></td>
              
              <td><a href="http://{{displaySandbox()}}.mortgageflex.com/{{displayCase()}}{{svc.url}}"><span ng-class="{true:'value',false:'invalid'}[(globals.sandbox && validcase())==true]">http://<span class="sandbox">{{displaySandbox()}}</span>.mortgageflex.com/<span class="case">{{displayCase()}}</span>{{svc.url}}</span></a></td>
            </tr>
            <tr ng-repeat="svc in services">
               <td>{{svc.name}}(local)<span ng-show="!!svc.notes" title="{{svc.notes}}">*</span></td>
              <td><span ng-bind-html-unsafe="getUrlStatus(svc.url)"></span></td>
              
              <td><a href="http://localhost{{svc.url}}"><span class="value">http://<span class="sandbox">localhost</span>{{svc.url}}</span></a></td>
            </tr>
          </tbody>
        </table>
        <h2>Config files</h2>
        <table data-role="parsed config viewer">
          <thead>
            <tr>
              <th>name</th><th>default db</th><th>connection strings</th><th>client strings</th><th></th>
            </tr>
          </thead>
          <tbody>
            <tr ng-repeat="svc in services">
              <td><a href="http://{{globals.nodeHost}}/web.config?host={{globals.sandbox}}&base={{machineBasePath}}{{case}}&path={{svc.dir}}Web.config">{{svc.name}}</a></td>
              <td><button ng-click="getSvcJson('http://'+globals.nodeHost+'/parsed.config?host='+globals.sandbox+'&base='+machineBasePath+case+'&path='+svc.dir+'Web.config',svc);">Refresh</button>
              </td>
              <td>{{svc.getDefaultDatabase(false,true)}}</td>
              <td title="{{svc.getConnectionString()}}">{{svc.getConnectionString(false,'connectionString')}}</td>
              <td><ul><li ng-repeat="slClient in svc.remoteClients"><span ng-show="!slClient.name">{{slClient}}</span><span ng-show="!!slClient.name"><a href="{{slClient.address}}">{{slClient.name}}</a></span></li></ul></td>

            </tr>
             <tr ng-repeat="svc in services">
              <td><a href="http://{{globals.nodeHost}}/web.config?host=localhost&base={{globals.localpath}}&path={{svc.dir}}Web.config">{{svc.name}}(local)</a></td>
              <td><button ng-click="getSvcJson('http://'+globals.nodeHost+'/parsed.config?host=localhost&base='+globals.localpath+'&path='+svc.dir+'Web.config',svc,true);">Refresh</button></td>
              <td>{{svc.getDefaultDatabase(true,true)}}</td>
              <td title="{{svc.getConnectionString(true)}}">{{svc.getConnectionString(true,'connectionString')}}</td>
              <td><ul><li ng-repeat="slClient in svc.localClients"><span ng-show="!slClient.name">{{slClient}}</span><span ng-show="!!slClient.name"><a href="{{slClient.address}}">{{slClient.name}}</a></span></li></ul>
              </td>
            </tr>
          </tbody>
        </table>

        </div>
      </div>
      <div data-role="deploy diagnostics" ng-show="tab ==6">
        \\{{globals.sandbox}}\{{machineBasePath}}{{case}}\LoanQuestNETDeploy\
        <button ng-click="getJson()">Refresh</button>
      </div>
    </div>
     <script src="jquery.ba-throttle-debounce.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js"></script>
    <script>
  
 function type(obj) {
    var obj_type = typeof obj;
    return ({
        is: function (type) {
            return obj_type === type;
        },
        is_object: function () {
            return obj_type === "object";
        },
        is_func: function () {
            return obj_type === "function";
        },
        is_string: function () {
            return obj_type === "string";
        }
    });
};

function maybe(item,message) {
    var _message=message;
    return ({
        result: function (accessor, __default) {
            if (!item) return type(accessor).is_func() ? __default : accessor;
            else return type(accessor).is_func() ? accessor(item) : item;
        },message:message,
        _: function (accessor,message) {
            if (!item) return maybe(null,_message);
            if (!accessor && type(item).is_func()) {

                return maybe(item(),message);
            }
            if (type(accessor).is_string()) {
                if (item.hasOwnProperty(accessor)) return maybe(item[accessor],message);
                var result = item[accessor];
                if (result) return maybe(item[accessor].call(item),message);

                return maybe(result,message);
            }
            if (type(accessor).is_func()) {

                return maybe(accessor(item),message);
            }

            return maybe(item[accessor],message);
        }
    });
};
    //https://github.com/knockout/knockout/blob/master/src/utils.js
    
    if(!Array.prototype.arrayFirst){
      Array.prototype.arrayFirst=function (predicate, predicateOwner) {
            var array= this || [];
            for (var i = 0, j = array.length; i < j; i++)
                if (predicate.call(predicateOwner, array[i]))
                    return array[i];
            return null;
        };
    }
    if(!Array.prototype.arrayMap){
      Array.prototype.arrayMap=function (mapping) {
            var array = this || [];
            var result = [];
            for (var i = 0, j = array.length; i < j; i++)
                result.push(mapping(array[i]));
            return result;
        };
    }
    var app = angular.module('myApp',[])
    .factory('globals',function(){
      var result={nodeHost:"mf1374-prog1.mortgageflex.com:81",localPath:"C$\\Microsoft .Net 3.5 Framework\\Mortgageflex products\\Common Framework\\Host\\",sandbox:"vBcdApp1"};
      window.globals=result;
      return result;
    });

    
    var Service = function(name,path,svc,notes){
        var self=this;
        this.name=name;
        this.path=path;
        this.svc=svc;
        this.notes=notes;
        this.dir="\\"+path.replace("/","\\")+"\\";
        this.url="/"+path.replace("\\","/")+"/"+svc;

        
        var getConfig=function(local){
          var parsed= local? self.parsedlocal:self.parsed;
          return parsed;
        };

        this.getDefaultDatabase= function(local,returnError){
          var parsed=getConfig(local);

          var dd=maybe(parsed,"not attempted")
            ._('configuration',"no configuration")
            ._('dataConfiguration',"no dataConfiguration")
            ._(0,"empty dataConfiguration")
            ._('$',"invalid dataConfiguration")
            ._('defaultDatabase',"no default database");
          var result= dd.result();
          if(!result && returnError)
            return dd.message;
          return result;
        };
        this.getConnectionString=function(local,propName){
          var dd= self.getDefaultDatabase(local);
          if(!dd)
            return;
          var parsed=local? self.parsedlocal:self.parsed;
          var connectionStringsJs= parsed.configuration.connectionStrings[0].add;
          if(!connectionStringsJs)
            return;
          var connectionStrings= connectionStringsJs.arrayMap(function(e){return e.$;});
          var cs=connectionStrings.arrayFirst(function(e){return e.name && e.name==dd;});
          return propName?cs[propName]:cs;
        };
        
        var getClients=function(local){
          var parsed=getConfig(local);
          var eps= maybe(parsed,"not attempted")
            ._('configuration',"no configuration")
            ._('system.serviceModel',"no serviceModel")
            ._(0,"empty serviceModel")
            ._('client',"no clients")
            ._(0,"empty clients")
            ._('endpoint',"no endpoints");
            var result=eps.result();
            if(!result)
          return [eps.message];

          var clients = result
            .arrayMap(function(a){
                return {name:a.$.name,address:a.$.address};
            });

          return clients;
        };
         this.localClients=getClients(true);
        this.remoteClients=getClients(false);
        this.onLocalChanged=function(){
            self.localClients=getClients(true);
        };
        this.onRemoteChanged=function(){
          self.remoteClients=getClients(false);
        };
      };
    var PublishCtrl=function($scope,$http,$timeout,globals){
      window.publishCtrl=$scope;
      $scope.globals=globals;
      $scope.sandbox=$scope.globals.sandbox;
      $scope.services = [
        new Service("Wcf Portal","Mortgageflex.Services.Host.LoanQuest","WcfPortal.svc"),
        new Service("Registration Portal","Mortgageflex.Services.Host.Registration","WcfPortal.svc"),
        new Service("Program Pricing","Mortgageflex.Services.Host.ProgramPricing","ProgramPricingService.svc"),
        new Service("Data Lookup","DataLookupService","DataLookupService.svc","path depth issues"),
        new Service("DocumentPrintingService","Mortgageflex.Services.Host.PrintingService","DocumentPrintingService.svc"),
        ];
      $scope.displayCase= function(){
        if($scope.case){
          return $scope.case;
        }
        return "______";
      }
      $scope.displaySandbox=function(){
        if($scope.globals.sandbox){
          return $scope.globals.sandbox;
        }
        return "v___App_";
      }
      $scope.caseUrl= function(){
          return 'http://'+$scope.displaySandbox()+'.mortgageflex.com/'+$scope.displayCase();
      };
      $scope.environmentName= function(){
        return $scope.customer ? $scope.customer + '-Cust' : 'Standard-';
      };
      $scope.validcase=function(){
        return $scope.case && ($scope.case.length==5 || $scope.isStandard);
      }
      $scope.deployUrl=function(){
        return '/LoanQuestNETDeploy/publish.htm';
      };
      var ajaxResults={empty:'<span>No data</span>'};

      $scope.getSvcJson= function(uri,svc,local){
        return $http.get(uri)
            .success(function(data,status,headers,config){
              console.log('ajax success:'+uri);
              window.parsed= data;
              if(local){
                svc.parsedlocal=data;
                svc.onLocalChanged();
              } else {
                svc.parsed=data;  
                svc.onRemoteChanged();
              }
              
            }).error(function(data,status,headers,config){
              console.log('ajax failure');
              return {error:status};
          });
      }

      $scope.getUrlStatus= function(subPath,force){ //force is for full custom paths
        
        if(subPath && subPath.length>0 && ($scope.validcase() && $scope.globals.sandbox && !ajaxResults[subPath] && $scope.machineBasePath) || force)
        {
          ajaxResults[subPath]=ajaxResults.empty;
          var targetUrl="http://"+$scope.globals.nodeHost+"/urlstatus?host="+$scope.globals.sandbox+".mortgageflex.com&path=/"+$scope.case+subPath;
          //console.log("getting status of "+targetUrl);
         
            $http.get(targetUrl)
            .success(function(data,status,headers,config){
              console.log('ajax success:'+JSON.stringify(data)+":"+targetUrl);
              ajaxResults[subPath]='<span class="success">'+data+'</span>';
            }).error(function(data,status,headers,config){
              console.log('ajax failure');
              ajaxResults[subPath]='<span class="error" title="'+subPath+'"">error:'+status+' </span>';
          });
          
        }
        return ajaxResults[subPath];
      };

      $scope.$watch('[globals.sandbox,case]',Cowboy.throttle( 350,  function(){
        ajaxResults={empty:'<span class="case">Loading...?</span>'};
      }),true);
      
      var setLocal=function(name,defaultVal,isGlobal){
        if(!window.localStorage)
          return;
        var target= isGlobal?$scope.globals:$scope;
        var stored=localStorage.getItem(name);
        if(!target[name] || stored){
          
          if(stored){
              target[name]=stored;  
            //console.log('found stored:'+name);
            
          } else{
            target[name]=defaultVal;  
          }
        }
        
        $scope.$watch((isGlobal?'globals.':'')+name,function(){
          $timeout(function(){
             if(target[name]){
              console.log('storing '+name+' as '+target[name]);
            localStorage.setItem(name,target[name]);
          } else {
            localStorage.removeItem(name);
          }},500);
         
        });
        
      };
      setLocal('case');
      setLocal('sandbox',undefined,true);
      setLocal('customer');
      setLocal('dev');
      setLocal('codebase');
      setLocal('isStandard');
      setLocal('lights',false);
      setLocal('machineBasePath','c$\\MFWebContent\\Cases\\');
    };
    </script>
   
  </body>
</html>